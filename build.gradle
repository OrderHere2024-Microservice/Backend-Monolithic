plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
}

group = 'com.backend'
version = '1.0.0'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

test {
    enabled = false
}

repositories {
    mavenCentral()
}

dependencies {
    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.3'

    // spring
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.1.4'
//    implementation 'org.springframework.boot:spring-boot-starter-amqp:3.1.4'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.1.4'
    implementation 'org.springframework.boot:spring-boot-starter-security:3.1.4'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.1.4'
    implementation 'org.springframework.boot:spring-boot-starter-websocket:3.1.4'
    implementation 'org.jetbrains:annotations:24.0.0'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:3.1.4'

    // json
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
    implementation 'com.google.code.gson:gson:2.10.1'

    // jwt & email
    implementation 'com.sun.mail:javax.mail:1.6.2'
    implementation 'javax.activation:javax.activation-api:1.2.0'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    // database
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.mapstruct:mapstruct:1.5.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.2.Final'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.postgresql:postgresql'
//	implementation 'redis.clients:jedis'

    // stripe
    implementation "com.stripe:stripe-java:20.103.0"

    // other
    implementation 'com.sendgrid:sendgrid-java'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-62:3.6.0'
    implementation "com.stripe:stripe-java:20.103.0"

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'org.springframework.security:spring-security-test'
//	testImplementation 'org.mockito:mockito-core'
//	testImplementation 'org.mockito:mockito-junit-jupiter'

    // development
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //minIO
    implementation 'io.minio:minio:8.5.2'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
}

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.9"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

apply plugin: 'checkstyle'
checkstyle {
    toolVersion = '10.12.4'
    configFile = file("src/main/resources/static/checkstyleConfig.xml")
    sourceSets = [sourceSets.main]
    showViolations = true
}

task checkstyle(type: Checkstyle) {
    configFile = file("src/main/resources/static/checkstyleConfig.xml")
    source = sourceSets.main.allJava
    classpath = files()
}
